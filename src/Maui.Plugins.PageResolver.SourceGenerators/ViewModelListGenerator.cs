using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Maui.Plugins.PageResolver.SourceGenerators
{
    [Generator]
    public class ViewModelListGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            StringBuilder lb = new StringBuilder();

            Log.Init(lb);

            try
            {
                // TODO: get all referenced assemblies
                var assembly = context.Compilation.Assembly;

                var types = GetAllTypes(context.Compilation.SourceModule.ContainingAssembly.GlobalNamespace);

                Log.WriteLine($"Scanning assembly: {assembly.Name}");

                StringBuilder sourceBuilder = new StringBuilder();

                sourceBuilder.Append(@"// ---------------
// <auto-generated>
//   Generated by the MauiPageResolver ViewModel registration module.
//   https://github.com/matt-goldman/Maui.Plugins.PageResolver
// </auto-generated>
// ---------------

");

                var pages = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("Page"));

                var viewModels = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("ViewModel"));

                Log.WriteLine($"Found {pages.Count()} pages.");
                Log.WriteLine($"Found {viewModels.Count()} ViewModels.");

                var usings = new List<string>();

                // add all the using statements
                foreach (var page in pages)
                {
                    if (page is null)
                        Log.WriteLine($"No type {page} found");

                    var pageNamespace = $"using {page.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(pageNamespace))
                        usings.Add(pageNamespace);

                    Log.WriteLine($"Found {page.Name} in {pageNamespace}");
                }

                foreach (var vm in viewModels)
                {
                    var vmNamespace = $"using {vm.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(vmNamespace))
                        usings.Add(vmNamespace);

                    Log.WriteLine($"Found {vm.Name} in {vmNamespace}");
                }

                foreach (var ns in usings)
                {
                    sourceBuilder.AppendLine(ns);
                }

                // add the namespace, open the partial class and method
                sourceBuilder.Append($@"
namespace Maui.Plugins.PageResolver;

public static partial class Resolver
{{
");
                sourceBuilder.AppendLine("partial static void InitialiseViewModelLookup()");
                sourceBuilder.AppendLine("{");

                foreach (var page in pages)
                {
                    var matches = viewModels.Where(vm =>
                        vm.Name == $"{page.Name}ViewModel" || vm.Name == page.Name.Substring(0, page.Name.Length - 4) + "ViewModel").ToList();

                    if (matches.Count == 1)
                        sourceBuilder.AppendLine($"ViewModelLookup.Add(typeof({page.Name}), typeof({matches[0].Name}));");
                    else if (matches.Count > 1)
                        Log.WriteLine($"Multiple ViewModel matches found for {page.Name}, skipping.");
                }

                sourceBuilder.AppendLine("}");
                
                // close the partial method and class
                sourceBuilder.Append(@"
}");

                context.AddSource("Resolver.g.cs", sourceBuilder.ToString());
                Log.WriteLine($"Generated: Resolver.g.cs, {sourceBuilder}");
            }
            catch (Exception ex)
            {
                Log.WriteLine($"{ex}");
                Log.WriteLine($"{ex.StackTrace}");
            }
            finally
            {
                Log.FlushLog();
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // no initialisation
        }

        private static IEnumerable<ITypeSymbol> GetAllTypes(INamespaceSymbol root)
        {
            foreach (var namespaceOrTypeSymbol in root.GetMembers())
            {
                if (namespaceOrTypeSymbol is INamespaceSymbol @namespace) foreach (var nested in GetAllTypes(@namespace)) yield return nested;

                else if (namespaceOrTypeSymbol is ITypeSymbol type) yield return type;
            }
        }
    }

    public static class Log
    {
        private static StringBuilder _builder;

        public static void Init(StringBuilder builder)
        {
            _builder = builder;
        }

        public static void Write(string entry)
        {
            _builder.Append($"{DateTime.Now.ToString()} - INFO - {entry}");
        }

        public static void WriteLine(string entry)
        {
            _builder.AppendLine($"{DateTime.Now.ToString()} - INFO - {entry}");
        }

        public static void FlushLog()
        {
            System.Diagnostics.Debug.Write(_builder.ToString());
        }
    }
}
