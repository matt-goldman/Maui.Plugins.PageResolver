using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Maui.Plugins.PageResolver.SourceGen
{
    [Generator]
    public class AutoDependencies : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            StringBuilder lb = new StringBuilder();

            Log.Init(lb);

            try
            {
                // TODO: get all referenced assemblies
                var assembly = context.Compilation.Assembly;

                var types = context.Compilation.SourceModule.ReferencedAssemblySymbols.SelectMany(a =>
                {
                    try
                    {
                        var main = a.Identity.Name.Split('.').Aggregate(a.GlobalNamespace, (s, c) => s.GetNamespaceMembers().Single(m => m.Name.Equals(c)));

                        return GetAllTypes(main);
                    }
                    catch
                    {
                        return Enumerable.Empty<ITypeSymbol>();
                    }
                });

                Log.WriteLine($"Scanning assembly: {assembly.Name}");

                Log.WriteLine("Getting MauiProgram...");

                var mainProgram = context.Compilation.GetEntryPoint(context.CancellationToken);

                Log.WriteLine("Got mainProgram:");
                Log.WriteLine(mainProgram.Name);

                var mainNamespace = mainProgram.ContainingNamespace.ToDisplayString();
                Log.WriteLine($"Main namespace: {mainNamespace}");

                var mauiProgram = $"{assembly.Name}.MauiProgram";

                Log.WriteLine($"Global namespace: {context.Compilation.Assembly.GlobalNamespace.Name}");

                var mainMethod = context.Compilation//.Assembly.GlobalNamespace
                    //.GetNamespaceMembers()
                    //.Where(m => m.Name == "MauiProgram")
                    //.FirstOrDefault();
                    .GetTypeByMetadataName(mauiProgram);

                if (mainMethod is null)
                {
                    Log.WriteLine("MauiProgram not found");
                    throw new Exception("MauiProgram not found.");
                }

                // TODO: check to see whether Autoreg has been invoked

                StringBuilder sourceBuilder = new StringBuilder();

                Log.WriteLine($"Found MauiProgram: {mainProgram}");
                Log.WriteLine($"Found main method: {mainMethod.Name}");

                sourceBuilder.Append(@"// ---------------
//<auto-generated>
//  Generated by the MauiPageResolver Auto-registration module. (https://github.com/matt-goldman/Maui.Plugins.PageResolver)
//</auto-generated>
// ---------------");

                // search for all Pages
                //var pages = assembly.GlobalNamespace
                //    .GetNamespaceMembers()
                //    .Where(m => m.IsType && m.Name.EndsWith("Page"))
                //    .ToList();

                var pages = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("Page"));

                // search for all ViewModels
                //var viewModels = assembly.GlobalNamespace
                //    .GetNamespaceMembers()
                //    .Where(m => m.IsType && m.Name.EndsWith("ViewModel"))
                //    .ToList();

                var viewModels = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("ViewModel"));

                // search for all Services
                //var services = assembly.GlobalNamespace
                //    .GetNamespaceMembers()
                //    .Where(m => m.IsType && m.Name.EndsWith("Service"))
                //    .ToList();

                var services = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("Service"));

                //var abstractions = assembly.GlobalNamespace
                //    .GetNamespaceMembers()
                //    .Where(m => m.IsType && m.Name.StartsWith("I") && m.Name.EndsWith("Service"))
                //    .ToList();

                var abstractions = types.Where(t => t.TypeKind == TypeKind.Interface && t.Name.EndsWith("Service"));

                Log.WriteLine($"Found {pages.Count()} pages.");
                Log.WriteLine($"Found {viewModels.Count()} ViewModels.");
                Log.WriteLine($"Found {services.Count()} Services.");
                Log.WriteLine($"Found {abstractions.Count()} interfaces.");

                // add all the using statements
                foreach (var page in pages)
                {
                    sourceBuilder.AppendLine($"using {page.ContainingNamespace.ToDisplayString()};");
                }

                foreach (var vm in viewModels)
                {
                    sourceBuilder.AppendLine($"using {vm.ContainingNamespace.ToDisplayString()};");
                }

                foreach (var service in services)
                {
                    sourceBuilder.AppendLine($"using {service.ContainingNamespace.ToDisplayString()};");
                }

                foreach (var i in abstractions)
                {
                    sourceBuilder.AppendLine($"using {i.ContainingNamespace.ToDisplayString()};");
                }

                // add the namespace, open the partial class and method
                sourceBuilder.Append($@"namespace {mainMethod.ContainingNamespace.ToDisplayString()};
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void Autoreg(IServiceCollection services)
        {{");

                // add page registrations
                foreach (var page in pages)
                {
                    sourceBuilder.AppendLine($"services.AddTransient<{page.Name}>();");
                }

                // add ViewModel registrations
                foreach (var vm in viewModels)
                {
                    sourceBuilder.AppendLine($"services.AddTransient<{vm.Name}>();");
                }

                // add Service registrations
                foreach (var service in services)
                {
                    var ifName = $"I{service.Name}";

                    var abstraction = abstractions.Where(a => a.Name == ifName).FirstOrDefault();

                    if (abstraction is null)
                    {
                        sourceBuilder.AppendLine($"services.AddSingleton<{service.Name}>();");
                    }
                    else
                    {
                        sourceBuilder.AppendLine($"services.AddSingleton<{ifName},{service.Name}>();");
                    }
                }

                // close the partial method and class
                sourceBuilder.Append(@"
        }
    }");

                // generate the source file
                var typeName = mainMethod.ContainingType.Name;

                context.AddSource($"{typeName}.g.cs", sourceBuilder.ToString());
            }
            catch (Exception ex)
            {
                Log.WriteLine($"{ex}");
                Log.WriteLine($"{ex.StackTrace}");
            }
            finally
            {
                Log.FlushLog();
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // no initialisation
            Log.WriteLine("Starting codegen...");
        }

        private static IEnumerable<ITypeSymbol> GetAllTypes(INamespaceSymbol root)
        {
            foreach (var namespaceOrTypeSymbol in root.GetMembers())
            {
                if (namespaceOrTypeSymbol is INamespaceSymbol @namespace) foreach (var nested in GetAllTypes(@namespace)) yield return nested;

                else if (namespaceOrTypeSymbol is ITypeSymbol type) yield return type;
            }
        }
    }

    public static class Log
    {
        private static StringBuilder _builder;

        public static void Init(StringBuilder builder)
        {
            _builder = builder;
        }

        public static void Write(string entry)
        {
            _builder.Append($"{entry}");
        }

        public static void WriteLine(string entry)
        {
            _builder.AppendLine($"{entry}");
        }

        public static void FlushLog()
        {
            //context.AddSource("autogen.log", _builder.ToString());
            System.IO.File.WriteAllText(@"E:\autogen.log", _builder.ToString());
        }
    }
}
