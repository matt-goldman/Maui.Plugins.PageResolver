using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Maui.Plugins.PageResolver.SourceGen
{
    [Generator]
    public class AutoDependencies : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            StringBuilder lb = new StringBuilder();

            Log.Init(lb);

            try
            {
                // TODO: get all referenced assemblies
                var assembly = context.Compilation.Assembly;

                var types = GetAllTypes(context.Compilation.SourceModule.ContainingAssembly.GlobalNamespace);
                
                Log.WriteLine($"Scanning assembly: {assembly.Name}");

                Log.WriteLine("Getting MauiProgram...");

                var mauiProgramName = $"{assembly.Name}.MauiProgram";

                Log.WriteLine($"Global namespace: {context.Compilation.Assembly.GlobalNamespace.Name}");

                var mauiProgram = context.Compilation
                    .GetTypeByMetadataName(mauiProgramName);

                if (mauiProgram is null)
                {
                    Log.WriteLine("MauiProgram not found");
                    throw new Exception("MauiProgram not found.");
                }

                // TODO: check to see whether Autoreg has been invoked

                StringBuilder sourceBuilder = new StringBuilder();

                Log.WriteLine($"Found main method: {mauiProgram.Name}");

                sourceBuilder.Append(@"// ---------------
// <auto-generated>
//   Generated by the MauiPageResolver Auto-registration module. (https://github.com/matt-goldman/Maui.Plugins.PageResolver)
// </auto-generated>
// ---------------

");

                var pages = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("Page"));

                var viewModels = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("ViewModel"));

                var services = types.Where(t => t.TypeKind == TypeKind.Class && t.Name.EndsWith("Service"));

                var abstractions = types.Where(t => t.TypeKind == TypeKind.Interface && t.Name.EndsWith("Service"));

                Log.WriteLine($"Found {pages.Count()} pages.");
                Log.WriteLine($"Found {viewModels.Count()} ViewModels.");
                Log.WriteLine($"Found {services.Count()} Services.");
                Log.WriteLine($"Found {abstractions.Count()} interfaces.");

                var usings = new List<string>();

                usings.Add("using Maui.Plugins.PageResolver;");

                // add all the using statements
                foreach (var page in pages)
                {
                    if (page is null)
                        Log.WriteLine($"No type {page} found");

                    var pageNamespace = $"using {page.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(pageNamespace))
                        usings.Add(pageNamespace);

                    Log.WriteLine($"Found {page.Name} in {pageNamespace}");
                }

                foreach (var vm in viewModels)
                {
                    var vmNamespace = $"using {vm.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(vmNamespace))
                        usings.Add(vmNamespace);

                    Log.WriteLine($"Found {vm.Name} in {vmNamespace}");
                }

                foreach (var service in services)
                {
                    var serviceNamespace = $"using {service.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(serviceNamespace))
                        usings.Add(serviceNamespace);

                    Log.WriteLine($"Found {service.Name} in {serviceNamespace}");
                }

                foreach (var i in abstractions)
                {
                    var iNamespace = $"using {i.ContainingNamespace.ToDisplayString()};";

                    if (!usings.Contains(iNamespace))
                        usings.Add(iNamespace);

                    Log.WriteLine($"Found {i.Name} in {iNamespace}");
                }

                foreach (var ns in usings)
                {
                    sourceBuilder.AppendLine(ns);
                }

                // add the namespace, open the partial class and method
                sourceBuilder.Append($@"
namespace {mauiProgram.ContainingNamespace.ToDisplayString()};

public static partial class {mauiProgram.Name}
{{
    static partial void UseAutoreg(IServiceCollection services)
    {{
");

                // add page registrations
                foreach (var page in pages)
                {
                    sourceBuilder.AppendLine($"         services.AddTransient<{page.Name}>();");
                }

                // add ViewModel registrations
                foreach (var vm in viewModels)
                {
                    sourceBuilder.AppendLine($"         services.AddTransient<{vm.Name}>();");
                }

                // add Service registrations
                foreach (var service in services)
                {
                    var ifName = $"I{service.Name}";

                    var abstraction = abstractions.Where(a => a.Name == ifName).FirstOrDefault();

                    if (abstraction is null)
                    {
                        sourceBuilder.AppendLine($"         services.AddSingleton<{service.Name}>();");
                    }
                    else
                    {
                        sourceBuilder.AppendLine($"         services.AddSingleton<{ifName}, {service.Name}>();");
                    }
                }

                sourceBuilder.AppendLine($"         services.UsePageResolver();");

                // close the partial method and class
                sourceBuilder.Append(@"    }
}");

                // generate the source file
                var typeName = mauiProgram.Name;

                context.AddSource($"{typeName}.g.cs", sourceBuilder.ToString());
                System.IO.File.WriteAllText($@"E:\{typeName}.g.cs", sourceBuilder.ToString());
            }
            catch (Exception ex)
            {
                Log.WriteLine($"{ex}");
                Log.WriteLine($"{ex.StackTrace}");
            }
            finally
            {
                Log.FlushLog();
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // no initialisation
        }

        private static IEnumerable<ITypeSymbol> GetAllTypes(INamespaceSymbol root)
        {
            foreach (var namespaceOrTypeSymbol in root.GetMembers())
            {
                if (namespaceOrTypeSymbol is INamespaceSymbol @namespace) foreach (var nested in GetAllTypes(@namespace)) yield return nested;

                else if (namespaceOrTypeSymbol is ITypeSymbol type) yield return type;
            }
        }
    }

    public static class Log
    {
        private static StringBuilder _builder;

        public static void Init(StringBuilder builder)
        {
            _builder = builder;
        }

        public static void Write(string entry)
        {
            _builder.Append($"{DateTime.Now.ToString()} - INFO - {entry}");
        }

        public static void WriteLine(string entry)
        {
            _builder.AppendLine($"{DateTime.Now.ToString()} - INFO - {entry}");
        }

        public static void FlushLog()
        {
            System.IO.File.WriteAllText(@"E:\autogen.log", _builder.ToString());
        }
    }
}
